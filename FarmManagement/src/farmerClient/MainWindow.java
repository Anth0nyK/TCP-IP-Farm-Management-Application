/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package farmerClient;

import java.util.*; // List

import javax.swing.JOptionPane;
import javax.swing.JComboBox;
import java.awt.event.MouseEvent;

import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.Socket;


import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RefineryUtilities;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;


import java.util.concurrent.*;
/**
 *
 * @author nunos
 */
public class MainWindow extends javax.swing.JFrame {

    private java.util.TreeMap<Integer, List<WeatherStationsStats>> WeatherStationsStatsList = new java.util.TreeMap<Integer, List<WeatherStationsStats>>();
    private int clientId;
    private JFrame loginW;
    private ServerConnection conn = new ServerConnection();
    Timer timerTsk = new Timer();
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow(JFrame loginW, int clientId) {
        this.clientId = clientId;
        this.loginW = loginW;
        initComponents();
        this.setLocationRelativeTo(null);
        
        this.PNLWeatherStationContainer.setVisible(false);
        conn.connect();
        
        serverRequestsHandler();
    }
    
    private void serverRequestsHandler() {
        try {
            if (!conn.isConnected()) {
                conn.connect();
            }
            conn.sendNoReplyRequest("getWeatherStationsStats\n" + clientId, true);

            this.timerTsk.schedule(new recorsiveStatsUpdate(), 0, 5000);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private String sendServerRequest(String requestParameters) {
        String clientType = "user";
        String weatherStationsServerStats = "";
        try {
            Socket server = new Socket("localhost", 9090);
            System.out.println("Connected to " + server.getInetAddress());

            //Create io streams
            DataInputStream inFromServer = new DataInputStream(server.getInputStream());
            DataOutputStream outToServer = new DataOutputStream(server.getOutputStream());

            //send to server
            outToServer.writeUTF(clientType + "\n" + requestParameters);

            //read from server
            weatherStationsServerStats = inFromServer.readUTF();
            // System.out.println("Server said: " + data);
            server.close();
        } catch (Exception e) {    
            System.out.println(e);
            System.out.println("error");
        }

        System.out.println("Connection to server has just closed\n");
        return weatherStationsServerStats;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        LBLConnectedWeatherStations = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        PNLWeatherStationContainer = new javax.swing.JPanel();
        PNLWeatherStationStats = new java.awt.Panel();
        LBLTemperature = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        LBLHumidity = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        LBLBarometric = new javax.swing.JLabel();
        LBLPrecipitation = new javax.swing.JLabel();
        LBLWindForce = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        PNLGps = new javax.swing.JPanel();
        Label19 = new javax.swing.JLabel();
        LBLGpsLocation = new javax.swing.JLabel();
        Label20 = new javax.swing.JLabel();
        Label21 = new javax.swing.JLabel();
        LBLHectares = new javax.swing.JLabel();
        LBLUsedFor = new javax.swing.JLabel();
        PNLTemperatureChart = new javax.swing.JPanel();
        PNLPrecipitationChart = new javax.swing.JPanel();
        PNLBarometricChart = new javax.swing.JPanel();
        PNLHumidityChart = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        CMBWeatherStation = new javax.swing.JComboBox<>();
        BTNLogOut = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 28)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Client");
        jLabel1.setName("LBLTitle"); // NOI18N

        jPanel1.setBackground(new java.awt.Color(102, 153, 255));
        jPanel1.setName("PNLStats"); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Weather stations connected:");

        LBLConnectedWeatherStations.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        LBLConnectedWeatherStations.setForeground(new java.awt.Color(204, 255, 204));
        LBLConnectedWeatherStations.setText("...");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LBLConnectedWeatherStations, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(LBLConnectedWeatherStations))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Select a Weather Station:");

        PNLWeatherStationStats.setMaximumSize(new java.awt.Dimension(190, 32767));
        PNLWeatherStationStats.setPreferredSize(new java.awt.Dimension(190, 229));

        LBLTemperature.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        LBLTemperature.setForeground(new java.awt.Color(51, 153, 0));
        LBLTemperature.setText("????");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel10.setText("Percipitation");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel12.setText("Barometric");

        LBLHumidity.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        LBLHumidity.setForeground(new java.awt.Color(51, 153, 0));
        LBLHumidity.setText("????");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel8.setText("Humidity");
        jLabel8.setToolTipText("");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel11.setText("Wind Force:");

        LBLBarometric.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        LBLBarometric.setForeground(new java.awt.Color(51, 153, 0));
        LBLBarometric.setText("????");

        LBLPrecipitation.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        LBLPrecipitation.setForeground(new java.awt.Color(51, 153, 0));
        LBLPrecipitation.setText("????");

        LBLWindForce.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        LBLWindForce.setForeground(new java.awt.Color(51, 153, 0));
        LBLWindForce.setText("????");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel9.setText("Temperature:");

        javax.swing.GroupLayout PNLWeatherStationStatsLayout = new javax.swing.GroupLayout(PNLWeatherStationStats);
        PNLWeatherStationStats.setLayout(PNLWeatherStationStatsLayout);
        PNLWeatherStationStatsLayout.setHorizontalGroup(
            PNLWeatherStationStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PNLWeatherStationStatsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PNLWeatherStationStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PNLWeatherStationStatsLayout.createSequentialGroup()
                        .addGroup(PNLWeatherStationStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PNLWeatherStationStatsLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addComponent(LBLPrecipitation))
                            .addGroup(PNLWeatherStationStatsLayout.createSequentialGroup()
                                .addGroup(PNLWeatherStationStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel11))
                                .addGap(20, 20, 20)
                                .addGroup(PNLWeatherStationStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LBLWindForce)
                                    .addComponent(LBLBarometric)
                                    .addComponent(LBLHumidity))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(PNLWeatherStationStatsLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(LBLTemperature, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        PNLWeatherStationStatsLayout.setVerticalGroup(
            PNLWeatherStationStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PNLWeatherStationStatsLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(PNLWeatherStationStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LBLTemperature)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(PNLWeatherStationStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(LBLPrecipitation))
                .addGap(18, 18, 18)
                .addGroup(PNLWeatherStationStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(LBLHumidity))
                .addGap(18, 18, 18)
                .addGroup(PNLWeatherStationStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(LBLBarometric))
                .addGap(18, 18, 18)
                .addGroup(PNLWeatherStationStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(LBLWindForce))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        Label19.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Label19.setText("GPS Location:");

        LBLGpsLocation.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        LBLGpsLocation.setText("???");

        Label20.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Label20.setText("Hectares:");

        Label21.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Label21.setText("Used for:");

        LBLHectares.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        LBLHectares.setText("???");

        LBLUsedFor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        LBLUsedFor.setText("???");

        javax.swing.GroupLayout PNLGpsLayout = new javax.swing.GroupLayout(PNLGps);
        PNLGps.setLayout(PNLGpsLayout);
        PNLGpsLayout.setHorizontalGroup(
            PNLGpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PNLGpsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PNLGpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Label21)
                    .addComponent(Label20)
                    .addComponent(Label19))
                .addGap(18, 18, 18)
                .addGroup(PNLGpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LBLGpsLocation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LBLHectares, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LBLUsedFor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        PNLGpsLayout.setVerticalGroup(
            PNLGpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PNLGpsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PNLGpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Label19)
                    .addComponent(LBLGpsLocation))
                .addGap(13, 13, 13)
                .addGroup(PNLGpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Label20)
                    .addComponent(LBLHectares))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PNLGpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Label21)
                    .addComponent(LBLUsedFor))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        PNLTemperatureChart.setBackground(new java.awt.Color(153, 153, 153));
        PNLTemperatureChart.setPreferredSize(new java.awt.Dimension(400, 270));

        javax.swing.GroupLayout PNLTemperatureChartLayout = new javax.swing.GroupLayout(PNLTemperatureChart);
        PNLTemperatureChart.setLayout(PNLTemperatureChartLayout);
        PNLTemperatureChartLayout.setHorizontalGroup(
            PNLTemperatureChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 375, Short.MAX_VALUE)
        );
        PNLTemperatureChartLayout.setVerticalGroup(
            PNLTemperatureChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );

        PNLPrecipitationChart.setBackground(new java.awt.Color(153, 153, 153));
        PNLPrecipitationChart.setPreferredSize(new java.awt.Dimension(400, 270));

        javax.swing.GroupLayout PNLPrecipitationChartLayout = new javax.swing.GroupLayout(PNLPrecipitationChart);
        PNLPrecipitationChart.setLayout(PNLPrecipitationChartLayout);
        PNLPrecipitationChartLayout.setHorizontalGroup(
            PNLPrecipitationChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 375, Short.MAX_VALUE)
        );
        PNLPrecipitationChartLayout.setVerticalGroup(
            PNLPrecipitationChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );

        PNLBarometricChart.setBackground(new java.awt.Color(153, 153, 153));
        PNLBarometricChart.setPreferredSize(new java.awt.Dimension(400, 270));

        javax.swing.GroupLayout PNLBarometricChartLayout = new javax.swing.GroupLayout(PNLBarometricChart);
        PNLBarometricChart.setLayout(PNLBarometricChartLayout);
        PNLBarometricChartLayout.setHorizontalGroup(
            PNLBarometricChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 375, Short.MAX_VALUE)
        );
        PNLBarometricChartLayout.setVerticalGroup(
            PNLBarometricChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );

        PNLHumidityChart.setBackground(new java.awt.Color(153, 153, 153));
        PNLHumidityChart.setPreferredSize(new java.awt.Dimension(400, 270));

        javax.swing.GroupLayout PNLHumidityChartLayout = new javax.swing.GroupLayout(PNLHumidityChart);
        PNLHumidityChart.setLayout(PNLHumidityChartLayout);
        PNLHumidityChartLayout.setHorizontalGroup(
            PNLHumidityChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 375, Short.MAX_VALUE)
        );
        PNLHumidityChartLayout.setVerticalGroup(
            PNLHumidityChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel7.setText("Temperature");

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel13.setText("Precipitation");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel14.setText("Barometric");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel15.setText("Humidity");
        jLabel15.setToolTipText("");

        javax.swing.GroupLayout PNLWeatherStationContainerLayout = new javax.swing.GroupLayout(PNLWeatherStationContainer);
        PNLWeatherStationContainer.setLayout(PNLWeatherStationContainerLayout);
        PNLWeatherStationContainerLayout.setHorizontalGroup(
            PNLWeatherStationContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PNLWeatherStationContainerLayout.createSequentialGroup()
                .addGroup(PNLWeatherStationContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(PNLGps, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PNLWeatherStationContainerLayout.createSequentialGroup()
                        .addGroup(PNLWeatherStationContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PNLWeatherStationContainerLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(PNLWeatherStationStats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(PNLWeatherStationContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PNLWeatherStationContainerLayout.createSequentialGroup()
                                        .addGap(34, 34, 34)
                                        .addGroup(PNLWeatherStationContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(PNLBarometricChart, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(PNLTemperatureChart, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(PNLWeatherStationContainerLayout.createSequentialGroup()
                                        .addGap(171, 171, 171)
                                        .addComponent(jLabel14)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PNLWeatherStationContainerLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7)
                                .addGap(225, 225, 225)))
                        .addGroup(PNLWeatherStationContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PNLPrecipitationChart, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PNLHumidityChart, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(PNLWeatherStationContainerLayout.createSequentialGroup()
                                .addGap(138, 138, 138)
                                .addComponent(jLabel13))
                            .addGroup(PNLWeatherStationContainerLayout.createSequentialGroup()
                                .addGap(151, 151, 151)
                                .addComponent(jLabel15)))))
                .addGap(41, 41, 41))
        );
        PNLWeatherStationContainerLayout.setVerticalGroup(
            PNLWeatherStationContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PNLWeatherStationContainerLayout.createSequentialGroup()
                .addGroup(PNLWeatherStationContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PNLWeatherStationContainerLayout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(PNLWeatherStationStats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PNLWeatherStationContainerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PNLWeatherStationContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PNLWeatherStationContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PNLPrecipitationChart, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PNLTemperatureChart, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(PNLWeatherStationContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PNLWeatherStationContainerLayout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(PNLHumidityChart, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PNLWeatherStationContainerLayout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(PNLBarometricChart, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, 18)
                .addComponent(PNLGps, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        CMBWeatherStation.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CMBWeatherStation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Please select a Weather Station..." }));
        CMBWeatherStation.setName("CMBWeatherStation"); // NOI18N
        CMBWeatherStation.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CMBWeatherStationItemStateChanged(evt);
            }
        });

        BTNLogOut.setText("Log Out");
        BTNLogOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                BTNLogOutMousePressed(evt);
            }
        });
        BTNLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNLogOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CMBWeatherStation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PNLWeatherStationContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(519, 519, 519)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BTNLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BTNLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(CMBWeatherStation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(PNLWeatherStationContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private int getCurrentSelectedWeatherStation() {
        try {
            String weatherStationText = CMBWeatherStation.getSelectedItem().toString();
            return Integer.parseInt((weatherStationText.substring(0, weatherStationText.indexOf("-"))).trim());
        } catch(Exception e) {
            return -2;
        }
    }
    
    
    private int currentWeatherStationId = -1;
    private void CMBWeatherStationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CMBWeatherStationItemStateChanged
        if (evt.getStateChange() != evt.SELECTED) {
            return;
        }
       
        if (!(this.CMBWeatherStation.getSelectedIndex() > 0)) { // By default the first index needs to be the message asking to select a weather station
            this.PNLWeatherStationContainer.setVisible(false);
            return;
        }
        
        this.PNLWeatherStationContainer.setVisible(true);
        
        int weatherStationId = getCurrentSelectedWeatherStation();

        currentWeatherStationId = weatherStationId;
        updateStatsAndCharts(currentWeatherStationId);
    }//GEN-LAST:event_CMBWeatherStationItemStateChanged

    private void BTNLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNLogOutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BTNLogOutActionPerformed

    private void BTNLogOutMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BTNLogOutMousePressed
        loginW.setVisible(true);
        timerTsk.cancel();
        timerTsk.purge();
        conn.disconnect();
        this.dispose();
    }//GEN-LAST:event_BTNLogOutMousePressed

    /*
    private void forceDataUpdate() {
        WeatherStationsStats weatherStation;
        ServerConnection con = new ServerConnection();
        con.connect();
        if (!con.isConnected()) {
            System.out.println("no conn");
            return;
        }
         
        String weatherStationData = con.sendRequest("getWeatherStationData\n" + String.valueOf(this.clientId) + "\n" + String.valueOf(currentWeatherStationId), true);
        
        String[] weatherStations = weatherStationData.split("WEATHERSTATION\n");
        
        String[] weatherStationStats = weatherStations[1].split("\n");
        System.out.println("client:\n\n" + weatherStationStats);
        updateWeatherStationStats(currentWeatherStationId, weatherStationStats, 100, true);
        con.disconnect();
    }*/
    
    class recorsiveStatsUpdate extends TimerTask { // implements Runnable
        private int recCount = 0;
        private int weatherStationId = -1;
        public recorsiveStatsUpdate() {}

        public void run() {
            // updateConnectedClientsNum();
            String weatherStationsServerStats = conn.sendRequest("update", false);
            recCount++;
            if (recCount > 60) recCount = 0;
            String[] weatherStations = weatherStationsServerStats.split("WEATHERSTATION\n");
            
            List<Integer> connectedStations = new ArrayList<Integer>();
            for (String weatherStation : weatherStations) {
                if (weatherStation.equals(weatherStations[0])) { // skips first since this is not a weather station because of the way split works
                    continue;
                }
                String[] weatherStationStats = weatherStation.split("\n");
                try {
                    int weatherStationId = Integer.parseInt(weatherStationStats[0]);
                    updateWeatherStationStats(weatherStationId, weatherStationStats, recCount, false);
                    connectedStations.add(weatherStationId);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            updateConnectedWeatherStations(connectedStations);
        }
    }
    
    /*
    public void updateConnectedClientsNum() {
        String connectedClients = sendServerRequest("getNumConnectedClients");
        this.LBLConnectedFarmersClients.setText(connectedClients);
    }*/
    
    public void updateWeatherStationStats(int weatherStationId, String[] weatherStationStats, int currentTime, boolean overwriteCurrent) { // requests to server the data
        try {
            double temperature = Double.parseDouble(weatherStationStats[1]);
            int precipitation = Integer.parseInt(weatherStationStats[2]);
            int humidity = Integer.parseInt(weatherStationStats[3]);
            double barometric = Double.parseDouble(weatherStationStats[4]);
            double windForce = Double.parseDouble(weatherStationStats[5]);
            
            String GPSLocation = weatherStationStats[7];
            String hectares = weatherStationStats[8];
            String usedFor = weatherStationStats[9];
            
            int timeStamp = currentTime;
 
            List<WeatherStationsStats> currentWeatherStationStats = new ArrayList<WeatherStationsStats>();
            if (WeatherStationsStatsList.containsKey(weatherStationId)) {
                currentWeatherStationStats = WeatherStationsStatsList.get(weatherStationId);
            }

            WeatherStationsStats weatherStationElement = new WeatherStationsStats(GPSLocation, temperature, humidity, barometric, windForce, precipitation, timeStamp, hectares, usedFor);
            if (overwriteCurrent) {
                currentWeatherStationStats.set(currentWeatherStationStats.size() - 1, weatherStationElement);
            } else {
                currentWeatherStationStats.add(weatherStationElement);
            }
            
            WeatherStationsStatsList.put(weatherStationId, currentWeatherStationStats);
            
            if (weatherStationId == currentWeatherStationId) {
                updateStatsAndCharts(weatherStationId);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return;
        }
    }
    
    public void updateStatsAndCharts(int weatherStationId) {
        if (!WeatherStationsStatsList.containsKey(weatherStationId)) {
            return;
        }
        List<WeatherStationsStats> currentWeatherStationStats = WeatherStationsStatsList.get(weatherStationId);
        
        WeatherStationsStats currentWeatherStationLastStat = currentWeatherStationStats.get(currentWeatherStationStats.size() - 1);
        this.LBLTemperature.setText(currentWeatherStationLastStat.getTemperature() + " Cº");
        this.LBLHumidity.setText(currentWeatherStationLastStat.getHumidity() + " %");
        this.LBLBarometric.setText(currentWeatherStationLastStat.getBarometricPressure() + " hPa");
        this.LBLWindForce.setText(currentWeatherStationLastStat.getWindForce() + " Km/h");
        this.LBLPrecipitation.setText(currentWeatherStationLastStat.getPrecipitation() + " mm");
        this.LBLGpsLocation.setText(currentWeatherStationLastStat.getGPSLocation());
        this.LBLHectares.setText(currentWeatherStationLastStat.getHectares());
        this.LBLUsedFor.setText(currentWeatherStationLastStat.getUsedFor());
        
        updateChart(weatherStationId, "temperature");
        updateChart(weatherStationId, "barometric");
        updateChart(weatherStationId, "precipitation");
        updateChart(weatherStationId, "humidity");
    }

    
    public void updateChart(int weatherStationId, String chartType) {
        List<WeatherStationsStats> currentWeatherStationStats = WeatherStationsStatsList.get(weatherStationId);
        int totalWeatherStationStats = currentWeatherStationStats.size();

        int firstStatToShow = (totalWeatherStationStats > 12) ? (totalWeatherStationStats - 12) : 0; // Only show the stats from the last (12 * 5) 60 minutes.
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (int i = firstStatToShow; i < totalWeatherStationStats; i++) {
            double toShowValue;
            switch (chartType) {
                case "temperature":
                    toShowValue = currentWeatherStationStats.get(i).getTemperature();
                    break;
                case "humidity":
                    toShowValue = currentWeatherStationStats.get(i).getHumidity();
                    break;
                case "barometric":
                    toShowValue = currentWeatherStationStats.get(i).getBarometricPressure();
                    break;
                case "windForce":
                    toShowValue = currentWeatherStationStats.get(i).getWindForce();
                    break;
                case "Precipitation":
                default:
                    toShowValue = currentWeatherStationStats.get(i).getPrecipitation();
                    break;
            }
            dataset.addValue(toShowValue , "" , String.valueOf(i % 60));
        }
      
        JFreeChart lineChart = ChartFactory.createLineChart(
         "",
         "minutes", chartType,
         dataset,
         PlotOrientation.VERTICAL,
         false,false,false);

        ChartPanel chartPanel = new ChartPanel(lineChart) {
            @Override
            public void mousePressed(MouseEvent e) {}
            @Override
            public void mouseClicked(MouseEvent e) {}
        };

        chartPanel.setPreferredSize(new java.awt.Dimension(355, 200));
        chartPanel.setPopupMenu(null);
        chartPanel.setDomainZoomable(false);
        chartPanel.setRangeZoomable(false);
        chartPanel.setEnabled(false);

        JPanel panelToUpdate;
        switch (chartType) {
            case "temperature":
                panelToUpdate = this.PNLTemperatureChart;
                break;
            case "humidity":
                panelToUpdate = this.PNLHumidityChart;
                break;
            case "barometric":
                panelToUpdate = this.PNLBarometricChart;
                break;
            case "windForce":
                panelToUpdate = this.PNLTemperatureChart; // not added yet
                break;
            case "Precipitation":
            default:
                panelToUpdate = this.PNLPrecipitationChart;
                break;
        }
        panelToUpdate.removeAll();
        panelToUpdate.setLayout(new BorderLayout());
        panelToUpdate.add(chartPanel, BorderLayout.NORTH);
        panelToUpdate.revalidate();
    }
    
    private void updateConnectedWeatherStations(List<Integer> connectedStations) {
        int numWeatherStations = connectedStations.size();
        int i = 1; // skips first line (Select weather station...)
        while (i < this.CMBWeatherStation.getItemCount()) {
            String weatherStationText = this.CMBWeatherStation.getItemAt(i);
            int weatherStationId = Integer.parseInt((weatherStationText.substring(0, weatherStationText.indexOf("-"))).trim());
            if (!connectedStations.contains(weatherStationId)) {
                this.CMBWeatherStation.removeItemAt(i);
                i--;
            } else {
                connectedStations.remove(Integer.valueOf(weatherStationId));
            }
            i++;
        }
        
        for (int connectedStation : connectedStations) {
            this.CMBWeatherStation.addItem(connectedStation + " - Weather Station");
        }
        this.LBLConnectedWeatherStations.setText(Integer.toString(numWeatherStations));
    }
    
    
/*
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTNLogOut;
    private javax.swing.JComboBox<String> CMBWeatherStation;
    private javax.swing.JLabel LBLBarometric;
    private javax.swing.JLabel LBLConnectedWeatherStations;
    private javax.swing.JLabel LBLGpsLocation;
    private javax.swing.JLabel LBLHectares;
    private javax.swing.JLabel LBLHumidity;
    private javax.swing.JLabel LBLPrecipitation;
    private javax.swing.JLabel LBLTemperature;
    private javax.swing.JLabel LBLUsedFor;
    private javax.swing.JLabel LBLWindForce;
    private javax.swing.JLabel Label19;
    private javax.swing.JLabel Label20;
    private javax.swing.JLabel Label21;
    private javax.swing.JPanel PNLBarometricChart;
    private javax.swing.JPanel PNLGps;
    private javax.swing.JPanel PNLHumidityChart;
    private javax.swing.JPanel PNLPrecipitationChart;
    private javax.swing.JPanel PNLTemperatureChart;
    private javax.swing.JPanel PNLWeatherStationContainer;
    private java.awt.Panel PNLWeatherStationStats;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
