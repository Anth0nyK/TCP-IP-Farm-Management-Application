/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author nunos
 */
public class Server_Menu_Logs extends javax.swing.JPanel {
    final List<WeatherStation> StationList;
    final List<Integer> ConnectedFarmerClients;

    /**
     * Creates new form Server_Menu_Logs
     */
    public Server_Menu_Logs(List<WeatherStation> StationList, List<Integer> ConnectedFarmerClients) {
        initComponents();
        this.StationList = StationList;
        this.ConnectedFarmerClients = ConnectedFarmerClients;
        
        this.CMBWeatherStations.addItem("Select a weather station...");
        Timer timer = new Timer();
        timer.schedule(new recorsiveUpdateWeatherStationsCMB(), 0, 5000);
    }

    class recorsiveUpdateWeatherStationsCMB extends TimerTask { // implements Runnable
        private java.util.TreeMap<Integer, List<String>> weatherStationsList = FileHandler.getInstance().getAllWeatherStations();
        private List<Integer> addedStations = new ArrayList<Integer>();
        
        public recorsiveUpdateWeatherStationsCMB() {
            for (Map.Entry<Integer, List<String>> cw : this.weatherStationsList.entrySet()) {
                // weatherStationsList.put(user.getKey(), user.getValue());
                addedStations.add(cw.getKey());
                CMBWeatherStations.addItem(cw.getKey() + " - Weather Station");
            }
            /*
            for (Map.Entry<Integer, WeatherStation> user : this.weatherStationsList.entrySet()) {
                weatherStationsList.put(user.getKey(), user.getValue());
                CMBWeatherStations.addItem(user.getKey() + " - Weather Station");
            }
            for (WeatherStation cw : StationList) {
                weatherStationsList.put(cw.getID(), cw);
                CMBWeatherStations.addItem(cw.getID() + " - Weather Station");
            }*/
        }

        public void run() {
            this.weatherStationsList = FileHandler.getInstance().getAllWeatherStations();
            
            List<Integer> toRemoveIds = new ArrayList<Integer>();
            
           for (Map.Entry<Integer, List<String>> cw : this.weatherStationsList.entrySet()) {
                // weatherStationsList.put(user.getKey(), user.getValue());
                if (!addedStations.contains(cw.getKey())) {
                    addedStations.add(cw.getKey());
                    CMBWeatherStations.addItem(cw.getKey() + " - Weather Station");
                }
            }
            
           for (Integer weatherStationId : addedStations) {
               if (!this.weatherStationsList.containsKey(weatherStationId)) {
                   CMBWeatherStations.removeItem(addedStations + " - Weather Station");
                   addedStations.remove(addedStations);
               }
           }
            /*
            List<Integer> currentIds = new ArrayList<Integer>();
            for (WeatherStation cw : StationList) {
                currentIds.add(cw.getID());
                if (!weatherStationsList.containsKey(cw.getID())) {
                    weatherStationsList.put(cw.getID(), cw);
                    CMBWeatherStations.addItem(cw.getID() + " - Weather Station");
                }
            }
            
            for (Map.Entry<Integer, WeatherStation> cw : weatherStationsList.entrySet()) {
                if (!currentIds.contains(cw.getKey())) {
                    CMBWeatherStations.removeItem(cw.getKey() + " - Weather Station");
                    weatherStationsList.remove(cw.getKey());
                }
            }*/
            validate();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BTNDownloadWeatherLogs = new javax.swing.JButton();
        CMBWeatherStations = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        TXALogs = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        BTNDownloadWeatherLogs.setText("Download Logs");
        BTNDownloadWeatherLogs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                BTNDownloadWeatherLogsMousePressed(evt);
            }
        });
        BTNDownloadWeatherLogs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNDownloadWeatherLogsActionPerformed(evt);
            }
        });

        CMBWeatherStations.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CMBWeatherStations.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        CMBWeatherStations.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CMBWeatherStationsItemStateChanged(evt);
            }
        });

        TXALogs.setEditable(false);
        TXALogs.setColumns(20);
        TXALogs.setRows(5);
        jScrollPane1.setViewportView(TXALogs);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Temperature(CÂº) | Precipitation(m) | Humidity(%) | Barometric P.(hPa) | Wind Velocity (km/h) | TimeStamp(unix)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(CMBWeatherStations, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(BTNDownloadWeatherLogs, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(95, 95, 95))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CMBWeatherStations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BTNDownloadWeatherLogs, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void BTNDownloadWeatherLogsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BTNDownloadWeatherLogsMousePressed
        String weatherStationText = this.CMBWeatherStations.getSelectedItem().toString();
        int weatherStationId = Integer.parseInt((weatherStationText.substring(0, weatherStationText.indexOf("-"))).trim());
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to save");   

        JFrame parentFrame = new JFrame();
        
        File file = new File(System.getProperty("user.home") + "/Desktop/");
        fileChooser.setCurrentDirectory(file);
        
        file = new File(System.getProperty("user.home") + "/Desktop/" + weatherStationId + "_weatherStation_logs.txt");
        fileChooser.setSelectedFile(file);
            
        int userSelection = fileChooser.showSaveDialog(parentFrame);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            int statusCode = FileHandler.getInstance().downloadFile(fileToSave, weatherStationId);
            
            if (statusCode == 1) {
                JOptionPane.showMessageDialog(this, "Logs downloaded successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "An error occured, please try again.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_BTNDownloadWeatherLogsMousePressed

    private void BTNDownloadWeatherLogsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNDownloadWeatherLogsActionPerformed
        
    }//GEN-LAST:event_BTNDownloadWeatherLogsActionPerformed

    private void CMBWeatherStationsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CMBWeatherStationsItemStateChanged
        if (evt.getStateChange() != evt.SELECTED) {
            return;
        }
        
        if (!(this.CMBWeatherStations.getSelectedIndex() > 0)) { // By default the first index needs to be the message asking to select a weather station
            return;
        }
        
        String weatherStationText = this.CMBWeatherStations.getSelectedItem().toString();
        int weatherStationId = Integer.parseInt((weatherStationText.substring(0, weatherStationText.indexOf("-"))).trim());
        
        this.TXALogs.setText(FileHandler.getInstance().getWeatherStationData(weatherStationId));
    }//GEN-LAST:event_CMBWeatherStationsItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTNDownloadWeatherLogs;
    private javax.swing.JComboBox<String> CMBWeatherStations;
    private javax.swing.JTextArea TXALogs;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
